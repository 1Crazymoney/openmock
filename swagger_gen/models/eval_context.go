// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EvalContext when evaluating a mock, the input context to evaluate. Contains subfields specific to each channel openmock supports
//
// swagger:model EvalContext
type EvalContext struct {

	// http context
	HTTPContext *EvalHTTPContext `json:"http_context,omitempty"`

	// kafka context
	KafkaContext *EvalKafkaContext `json:"kafka_context,omitempty"`
}

// Validate validates this eval context
func (m *EvalContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHTTPContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKafkaContext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvalContext) validateHTTPContext(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPContext) { // not required
		return nil
	}

	if m.HTTPContext != nil {
		if err := m.HTTPContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_context")
			}
			return err
		}
	}

	return nil
}

func (m *EvalContext) validateKafkaContext(formats strfmt.Registry) error {

	if swag.IsZero(m.KafkaContext) { // not required
		return nil
	}

	if m.KafkaContext != nil {
		if err := m.KafkaContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kafka_context")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EvalContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvalContext) UnmarshalBinary(b []byte) error {
	var res EvalContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
