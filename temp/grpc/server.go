// DO NOT EDIT. This file is autogenerated by OpenMock 
package openmock

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net"
	"net/http"

	"github.com/mitchellh/mapstructure"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

const (
	TCP_ADDRESS  = "0.0.0.0:9997"
)



type MyService struct{}





func (s *MyService) MyMethod(ctx context.Context, in *MyRequest) (*MyResponse,error){
	out := &MyResponse{}
	err := findStub("MyService", "MyMethod", in, out)
	return out, err
}





func main() {
	lis, err := net.Listen("tcp", TCP_ADDRESS)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	s := grpc.NewServer()
	
	
	RegisterMyServiceServer(s, &MyService{})

	

	reflection.Register(s)
	fmt.Println("Serving gRPC on tcp://" + TCP_ADDRESS)
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}


type payload struct {
	Service string      `json:"service"`
	Method  string      `json:"method"`
	Data    interface{} `json:"data"`
}

type response struct {
	Data  interface{} `json:"data"`
	Error string      `json:"error"`
}

func findMock(service, method string, in, out interface{}) error {
	fmt.Println("findMock Not Implemented. TODO: read om.repo.GRPCMocks")
}








